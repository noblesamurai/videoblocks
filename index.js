const assert = require('assert');
const rp = require('request-promise-native');
const crypto = require('crypto');
const url = require('url');
const defaultsDeep = require('lodash.defaultsdeep');

const apiUrl = 'https://api.videoblocks.com/';

function rpOptions (endpoint) {
  return {
    method: 'GET',
    uri: url.resolve(apiUrl, endpoint),
    json: true,
    resolveWithFullResponse: true
  };
}

// The authentication code is generated by using the SHA-256 hmac algorithm
// with the requested resource as the data and the secret key concatenated with
// the expiration time as the key. The hash is expected in hexadecimal format.
function auth (config, endpoint) {
  const expires = Math.floor(Date.now() / 1000);
  const hmac = crypto.createHmac('sha256', config.privateKey + expires);
  hmac.update(endpoint);
  return { EXPIRES: expires, HMAC: hmac.digest('hex'), APIKEY: config.publicKey };
}

/**
 * @module videoblocks
 * Returns a wrapped version of request-promise-native that is authed to
 * interact with videoblocks API.
 * @params {object} config
 * @returns {function} function(endpoint, opts)
 * @description
 * - config
 *   - config.privateKey
 *   - config.publicKey
 * - endpoint - the endpoint you wish to use, e.g. '/api/v1/stock-items/search'
 * - opts - additional options for request-native-promise.  These will take
 *   precedence over anything we derive.
 */
module.exports = function (config) {
  assert(config.privateKey, 'must specify private key');
  assert(config.publicKey, 'must specify public key');
  return function (endpoint, options) {
    const rpOpts = defaultsDeep(
      options, // prefer user opts over generated ones
      rpOptions(endpoint),
      { qs: auth(config, endpoint) }
    );
    return rp(rpOpts);
  };
};
